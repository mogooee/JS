const table = [
  [
    0.5, 0.50399, 0.50798, 0.51197, 0.51595, 0.51994, 0.52392, 0.5279, 0.53188,
    0.53586,
  ],
  [
    0.53983, 0.5438, 0.54776, 0.55172, 0.55567, 0.55962, 0.5636, 0.56749,
    0.57142, 0.57535,
  ],
  [
    0.57926, 0.58317, 0.58706, 0.59095, 0.59483, 0.59871, 0.60257, 0.60642,
    0.61026, 0.61409,
  ],
  [
    0.61791, 0.62172, 0.62552, 0.6293, 0.63307, 0.63683, 0.64058, 0.64431,
    0.64803, 0.65173,
  ],
  [
    0.65542, 0.6591, 0.66276, 0.6664, 0.67003, 0.67364, 0.67724, 0.68082,
    0.68439, 0.68793,
  ],
  [
    0.69146, 0.69497, 0.69847, 0.70194, 0.7054, 0.70884, 0.71226, 0.71566,
    0.71904, 0.7224,
  ],
  [
    0.72575, 0.72907, 0.73237, 0.73565, 0.73891, 0.74215, 0.74537, 0.74857,
    0.75175, 0.7549,
  ],
  [
    0.75804, 0.76115, 0.76424, 0.7673, 0.77035, 0.77337, 0.77637, 0.77935,
    0.7823, 0.78524,
  ],
  [
    0.78814, 0.79103, 0.79389, 0.79673, 0.79955, 0.80234, 0.80511, 0.80785,
    0.81057, 0.81327,
  ],
  [
    0.81594, 0.81859, 0.82121, 0.82381, 0.82639, 0.82894, 0.83147, 0.83398,
    0.83646, 0.83891,
  ],
  [
    0.84134, 0.84375, 0.84614, 0.84849, 0.85083, 0.85314, 0.85543, 0.85769,
    0.85993, 0.86214,
  ],
  [
    0.86433, 0.8665, 0.86864, 0.87076, 0.87286, 0.87493, 0.87698, 0.879, 0.881,
    0.88298,
  ],
  [
    0.88493, 0.88686, 0.88877, 0.89065, 0.89251, 0.89435, 0.89617, 0.89796,
    0.89973, 0.90147,
  ],
  [
    0.9032, 0.9049, 0.90658, 0.90824, 0.90988, 0.91149, 0.91308, 0.91466,
    0.91621, 0.91774,
  ],
  [
    0.91924, 0.92073, 0.9222, 0.92364, 0.92507, 0.92647, 0.92785, 0.92922,
    0.93056, 0.93189,
  ],
  [
    0.93319, 0.93448, 0.93574, 0.93699, 0.93822, 0.93943, 0.94062, 0.94179,
    0.94295, 0.94408,
  ],
  [
    0.9452, 0.9463, 0.94738, 0.94845, 0.9495, 0.95053, 0.95154, 0.95254,
    0.95352, 0.95449,
  ],
  [
    0.95543, 0.95637, 0.95728, 0.95818, 0.95907, 0.95994, 0.9608, 0.96164,
    0.96246, 0.96327,
  ],
  [
    0.96407, 0.96485, 0.96562, 0.96638, 0.96712, 0.96784, 0.96856, 0.96926,
    0.96995, 0.97062,
  ],
  [
    0.97128, 0.97193, 0.97257, 0.9732, 0.97381, 0.97441, 0.975, 0.97558,
    0.97615, 0.9767,
  ],
  [
    0.97725, 0.97778, 0.97831, 0.97882, 0.97932, 0.97982, 0.9803, 0.98077,
    0.98124, 0.98169,
  ],
  [
    0.98214, 0.98257, 0.983, 0.98341, 0.98382, 0.98422, 0.98461, 0.985, 0.98537,
    0.98574,
  ],
  [
    0.9861, 0.98645, 0.98679, 0.98713, 0.98745, 0.98778, 0.98809, 0.9884,
    0.9887, 0.98899,
  ],
  [
    0.98928, 0.98956, 0.98983, 0.9901, 0.99036, 0.99061, 0.99086, 0.99111,
    0.99134, 0.99158,
  ],
  [
    0.9918, 0.99202, 0.99224, 0.99245, 0.99266, 0.99286, 0.99305, 0.99324,
    0.99343, 0.99361,
  ],
  [
    0.99379, 0.99396, 0.99413, 0.9943, 0.99446, 0.99461, 0.99477, 0.99492,
    0.99506, 0.9952,
  ],
  [
    0.99534, 0.99547, 0.9956, 0.99573, 0.99585, 0.99598, 0.99609, 0.99621,
    0.99632, 0.99643,
  ],
  [
    0.99653, 0.99664, 0.99674, 0.99683, 0.99693, 0.99702, 0.99711, 0.9972,
    0.99728, 0.99736,
  ],
  [
    0.99744, 0.99752, 0.9976, 0.99767, 0.99774, 0.99781, 0.99788, 0.99795,
    0.99801, 0.99807,
  ],
  [
    0.99813, 0.99819, 0.99825, 0.99831, 0.99836, 0.99841, 0.99846, 0.99851,
    0.99856, 0.99861,
  ],
  [
    0.99865, 0.99869, 0.99874, 0.99878, 0.99882, 0.99886, 0.99889, 0.99893,
    0.99896, 0.999,
  ],
  [
    0.99903, 0.99906, 0.9991, 0.99913, 0.99916, 0.99918, 0.99921, 0.99924,
    0.99926, 0.99929,
  ],
  [
    0.99931, 0.99934, 0.99936, 0.99938, 0.9994, 0.99942, 0.99944, 0.99946,
    0.99948, 0.9995,
  ],
  [
    0.99952, 0.99953, 0.99955, 0.99957, 0.99958, 0.9996, 0.99961, 0.99962,
    0.99964, 0.99965,
  ],
  [
    0.99966, 0.99968, 0.99969, 0.9997, 0.99971, 0.99972, 0.99973, 0.99974,
    0.99975, 0.99976,
  ],
];
//동기적
const fs = require("fs");
let data = fs
  .readFileSync("Mission5/data.txt")
  .toString()
  .split("\n")
  .map((item) => +item);

//평균
function getMean(data) {
  let sum = 0;
  let avg = 0;
  data.forEach(function (element) {
    sum += element;
  });

  avg = Number((sum / data.length).toFixed(2));
  return avg;
}

//this 화살표함수

//console.log(getMean(data));

//표준편차: 분산에 루트를 씌운다.
// 분산 구하는 법
// 1. 평균으로 각 데이터의 편차를 구한다.
// 2. 편차들을 제곱한 다음 분산(편차 제곱의 평균)을 구한다.
// 3. 루트를 씌워서 표준편차를 구한다.

//표준편차
function getStandardDeviation(data) {
  let avg = getMean(data);
  let SumSquaresDeviation = 0;
  data.forEach(function (element) {
    SumSquaresDeviation += Math.pow(element - avg, 2);
  });
  //표본표준편차
  let variance = SumSquaresDeviation / (data.length - 1);

  let StandardDeviation = Number(Math.sqrt(variance).toFixed(2));
  console.log(`평균: ${avg}`);
  console.log(`표준편차: ${StandardDeviation}`);
  return StandardDeviation;
}

//위 데이터는 정규분포이다. 70-80점 사이의 값을 갖는 비율은 얼마인가?
//표준화 -> 표준정규분포 ; z값을 표준정규분포표에서 찾아 면적을 구한다.
// 70 이상이고 80 이하일 확률 = 80이하일 확률 - 70 이하일 확률

//표준화
function getStandardization(data, a, b) {
  let avg = getMean(data);
  let StandardDeviation = getStandardDeviation(data);
  let z = {};
  // -1.00 이하 = 1.00이상 = 1-0.8413 = 0.1587 = 15.87%

  if (Math.abs(z.a) >= 3.5) return 3.49;
  if (Math.abs(z.b) >= 3.5) return 3.49;

  z.a = Number(((a - avg) / StandardDeviation).toFixed(2)); //-1
  // 0.27이하 = 0.6064 = 60.64%
  z.b = Number(((b - avg) / StandardDeviation).toFixed(2)); // 0.27
  console.log(`표준화 값: ${JSON.stringify(z)}`);
  return z;
}

//표준정규분포표에서 확률찾기
function findProbability(data, a, b) {
  let percentage = [];
  let probability = 0;
  let z = getStandardization(data, a, b);

  for (i = 0; i < Object.values(z).length; i++) {
    if (Object.values(z)[i] < 0)
      //행: 10을 곱한 정수 , 열: 100을 곱한 일의 자리수
      //z.a=-1, z.b=0.27
      percentage.push(
        (
          1 -
          table[Math.abs(parseInt(z.a * 10))][
            Math.abs(parseInt(z.a * 100)) % 10
          ]
        ).toFixed(5)
      );
    else percentage.push(table[parseInt(z.b * 10)][(z.b * 100) % 10]);
  }

  probability = Number((percentage[1] - percentage[0]).toFixed(4));
  //console.log(`70점 이상 80점 이하일 확률: ${probability}`);
  return probability;
}
//console.log(findProbability(data, 70, 80)); //44.78%

// function printArrayInformation(data, a, b) {
//   let avg = getMean(data);
//   let StandardDeviation = getStandardDeviation(data);
//   let z = getStandardization(data, a, b);
//   let probability = findProbability(data, a, b);

//   // console.log(`평균: ${avg}`);
//   // console.log(`표준편차: ${StandardDeviation}`);
//   // console.log(`표준화 값: ${z}`);
//   // console.log(`70점 이상 80점 이하일 확률: ${probability}`);
// }

exports.getMean = getMean;
exports.getStandardDeviation = getStandardDeviation;
exports.getStandardization = getStandardization;
exports.findProbability = findProbability;
//exports.printArrayInformation = printArrayInformation;

//printArrayInformation(data, 70, 80);
